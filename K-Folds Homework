{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ecadiena/machine_learning_notebooks/blob/main/Eda_Cadiena_Homework1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Implement a function for (a) accuracy and (b) 10-fold cross validation using any provided dataset. Fill in the calculate_accuracy and run_ten_fold_cross_validation function templates below. \n",
        "\n",
        "You may not import any Python library apart from the imports which are already provided below. This includes sub-libraries (i.e., you cannot use sklearn beyond the svm module used in the helper functions)."
      ],
      "metadata": {
        "id": "3snNkeep6cDd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "###\n",
        "### Code imports.\n",
        "###\n",
        "\n",
        "import numpy as np\n",
        "from sklearn import svm\n",
        "from sklearn.datasets import load_iris"
      ],
      "metadata": {
        "id": "-0WeEGFq7xIb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DlVjvJ436PEf"
      },
      "outputs": [],
      "source": [
        "def train_model(X_train, y_train):\n",
        "  '''\n",
        "  Helper function which returns a trained model given a training \n",
        "  set (X_train, y_train).\n",
        "  '''\n",
        "  clf = svm.SVC()\n",
        "  clf.fit(X_train, y_train)\n",
        "  return clf\n",
        "\n",
        "def make_predictions(model, X_test):\n",
        "  '''\n",
        "  Helper function which returns a NumPy array of predictions given\n",
        "  a model and a set of data points X_test.\n",
        "  '''\n",
        "  return model.predict(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_accuracy(y_true, y_pred):\n",
        "  '''\n",
        "  Question 4a\n",
        "\n",
        "  TODO\n",
        "  '''\n",
        "  fp = 0\n",
        "  tp = 0\n",
        "  tn = 0\n",
        "  fn = 0\n",
        "  for i in range(len(y_true)):\n",
        "    if y_true[i] == 0 and y_pred[i] == 0:\n",
        "        tn += 1\n",
        "    if (y_true[i] == 1 & y_pred[i] == 1) or (y_true[i] == 2 & y_pred[i] == 2):\n",
        "        tp += 1\n",
        "    if y_true[i] > y_pred[i]:\n",
        "        fn += 1\n",
        "    if y_true[i] < y_pred[i]:\n",
        "        fp += 1\n",
        "  return ((tp + tn) / (tp + tn + fp + fn)) * 100"
      ],
      "metadata": {
        "id": "iPSMMyAGHlsU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def unit_test_calculate_accuracy():\n",
        "  '''\n",
        "  Test your solution.\n",
        "  '''\n",
        "\n",
        "  y_true = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2])\n",
        "  y_pred = np.array([0, 0, 1, 1, 2, 1, 0, 1, 2])\n",
        "  accuracy = calculate_accuracy(y_true, y_pred)\n",
        "  \n",
        "  print('Calculated accuracy: ', accuracy)\n",
        "  print('Expected accuracy: 55.55555555555556')\n",
        "\n",
        "unit_test_calculate_accuracy()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Dkg4V-mL1zL",
        "outputId": "155479d6-6e50-41bf-83c5-a6f7fb1f02a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Calculated accuracy:  55.55555555555556\n",
            "Expected accuracy: 55.55555555555556\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def run_ten_fold_cross_validation(X, y):\n",
        "  '''\n",
        "  Question 4b.\n",
        "\n",
        "  TODO\n",
        "  '''\n",
        "  x_train = []\n",
        "  x_test = []\n",
        "  y_train = []\n",
        "  y_test = []\n",
        "  folds = []\n",
        "  # acc = []\n",
        "\n",
        "  t = np.column_stack((X, y))\n",
        "  # print(t)\n",
        "  \n",
        "  folds = np.array_split(t, 10)\n",
        "  # print(folds)\n",
        "\n",
        "  for i in range(10):\n",
        "    test = folds[i]\n",
        "    for j in range(10):\n",
        "      train = np.array([]).reshape(0, 5)\n",
        "      train = np.concatenate((train, folds[j]), axis=0)\n",
        "  \n",
        "    x_train = train[:, :-1]\n",
        "    y_train = train[:, :-1]\n",
        "    x_test = test[:, :-1]\n",
        "    y_test = test[:, :-1]\n",
        "\n",
        "    # error zone!\n",
        "    # trained_model = train_model(x_train, y_train)\n",
        "    # predict = make_predictions(trained_model, x_test)\n",
        "    \n",
        "  # tried to find mean and stddev but got errors\n",
        "  # mean = np.mean(acc)\n",
        "  # stdev = np.mean(acc)\n",
        "\n",
        "  return None, None"
      ],
      "metadata": {
        "id": "-_KOjX2sHmC3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def unit_test_cross_validation_example():\n",
        "  '''\n",
        "  Test your solution.\n",
        "  '''\n",
        "\n",
        "  X, y = load_iris(return_X_y=True)\n",
        "  mean_accuracy, std_accuracy = run_ten_fold_cross_validation(X, y)\n",
        "\n",
        "  print('Mean accuracy: ', mean_accuracy, ' +/- ', std_accuracy)\n",
        "  print('Expected mean and standard deviation: 93.33333333333334  +/-  7.302967433402213')\n",
        "\n",
        "unit_test_cross_validation_example()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IT2U9umW7bKv",
        "outputId": "4a7a9c1d-c2a5-4ab6-ca29-f63c738ea83f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean accuracy:  None  +/-  None\n",
            "Expected mean and standard deviation: 93.33333333333334  +/-  7.302967433402213\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tkY7CQeeG99T"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}

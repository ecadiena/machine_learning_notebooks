{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNnIQpdURTtCqJB12ZtBCQf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ecadiena/machine_learning_notebooks/blob/main/Final%20Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Import the dataset\n",
        "1. Find a dataset on Kaggle\n",
        "2. Create an API key\n",
        "3. Fetch the dataset\n",
        "4. Download on Google Collab\n",
        "5. Read the CSV file\n"
      ],
      "metadata": {
        "id": "hTAMqUE1W5RC"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MjmqlVaCJb_v",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "953446e9-56cd-4bd3-a6cc-0e98a7b10502"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting opendatasets\n",
            "  Downloading opendatasets-0.1.22-py3-none-any.whl (15 kB)\n",
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.9/dist-packages (from opendatasets) (1.5.13)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.9/dist-packages (from opendatasets) (8.1.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.9/dist-packages (from opendatasets) (4.65.0)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.9/dist-packages (from kaggle->opendatasets) (1.16.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.9/dist-packages (from kaggle->opendatasets) (2022.12.7)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.9/dist-packages (from kaggle->opendatasets) (1.26.15)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.9/dist-packages (from kaggle->opendatasets) (2.8.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.9/dist-packages (from kaggle->opendatasets) (2.27.1)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.9/dist-packages (from kaggle->opendatasets) (8.0.1)\n",
            "Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.9/dist-packages (from python-slugify->kaggle->opendatasets) (1.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests->kaggle->opendatasets) (3.4)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests->kaggle->opendatasets) (2.0.12)\n",
            "Installing collected packages: opendatasets\n",
            "Successfully installed opendatasets-0.1.22\n"
          ]
        }
      ],
      "source": [
        "pip install opendatasets"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install pandas"
      ],
      "metadata": {
        "id": "KtW9KH_aLVpQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b5a55dfc-63dc-4490-979a-0ea9d8a812bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (1.5.3)\n",
            "Requirement already satisfied: numpy>=1.20.3 in /usr/local/lib/python3.9/dist-packages (from pandas) (1.22.4)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas) (2022.7.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.9/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/dist-packages (from python-dateutil>=2.8.1->pandas) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import opendatasets as od\n",
        "  \n",
        "od.download(\n",
        "    \"https://www.kaggle.com/datasets/balabaskar/water-quality-data-india?resource=download\", force=True)"
      ],
      "metadata": {
        "id": "NPBXGNj_LoMD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "47ee69c7-4300-4235-d6da-fb02cf1be12e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please provide your Kaggle credentials to download this dataset. Learn more: http://bit.ly/kaggle-creds\n",
            "Your Kaggle username: edalainecadiena\n",
            "Your Kaggle Key: ··········\n",
            "Downloading water-quality-data-india.zip to ./water-quality-data-india\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 25.6k/25.6k [00:00<00:00, 21.3MB/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        " \n",
        "# reading the CSV file\n",
        "data = pd.read_csv(\"/content/water-quality-data-india/Water_pond_tanks_2021.csv\", encoding='cp1252', header=0)\n",
        "\n",
        "# displaying the contents of the CSV file\n",
        "df = pd.DataFrame(data)\n",
        "df = df.replace('-', np.nan)\n",
        "df = df.replace('\\n4', '',regex=True)\n",
        "df = df.replace('\\n', ' ',regex=True)\n",
        "df.iloc[:,4:20] = df.iloc[:,4:20].astype(float)\n",
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 531
        },
        "id": "A5qEGGjgMKA9",
        "outputId": "881f2635-2a2d-4ab4-d50e-8c55f35c9d9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-0779571ef741>:14: DeprecationWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`\n",
            "  df.iloc[:,4:20] = df.iloc[:,4:20].astype(float)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   STN\\nCode                        Name of Monitoring Location  \\\n",
              "0     4368.0      KOLLERU LAKE KOKKIRAYALANKA (V), KAILALUR (M)   \n",
              "1     2353.0  KONDAKARLA-AAVA LAKE, PARAWADA PHARMA CITY, VI...   \n",
              "2     1790.0                       PULICATE LAKE , NELLORE DIST   \n",
              "3     4391.0      CHENGAMBAKAM TANK IN SRI CITY SEZ,\\nTIRUPATHI   \n",
              "4     4921.0           ANNAMAYYA PROJECT ON CHEYYERU\\nRESERVOIR   \n",
              "\n",
              "  Type Water Body      State Name  Temperature\\n?C (Min)  \\\n",
              "0            LAKE  ANDHRA PRADESH                   24.0   \n",
              "1            LAKE  ANDHRA PRADESH                   26.0   \n",
              "2            LAKE  ANDHRA PRADESH                   18.0   \n",
              "3            TANK  ANDHRA PRADESH                   22.0   \n",
              "4         Wetland  ANDHRA PRADESH                   21.0   \n",
              "\n",
              "   Temperature\\n?C (Max) Dissolved Oxygen (mg/L) (Min)  \\\n",
              "0                   27.0                           3.2   \n",
              "1                   29.0                           3.0   \n",
              "2                   24.0                           4.2   \n",
              "3                   29.0                           5.4   \n",
              "4                   30.0                           5.4   \n",
              "\n",
              "  Dissolved Oxygen (mg/L) (Max) pH (Min)  pH (Max)  \\\n",
              "0                           6.5      7.0       8.0   \n",
              "1                           6.8      6.9       7.8   \n",
              "2                           6.0      7.2       8.2   \n",
              "3                           6.2      6.3       7.9   \n",
              "4                           6.5      7.3       8.0   \n",
              "\n",
              "  Conductivity (?mhos/cm) (Min) Conductivity (?mhos/cm) (Max)  \\\n",
              "0                           245                          5160   \n",
              "1                           599                          1179   \n",
              "2                         28000                         56900   \n",
              "3                           180                           476   \n",
              "4                           496                           734   \n",
              "\n",
              "  BOD (mg/L) (Min) BOD (mg/L) (Max) Nitrate N + Nitrite N(mg/L) (Min)  \\\n",
              "0              1.6              3.2                              1.02   \n",
              "1              1.9              4.6                              0.77   \n",
              "2              2.4              2.8                              1.20   \n",
              "3              1.0              2.5                              0.34   \n",
              "4              1.0              2.3                              0.35   \n",
              "\n",
              "  Nitrate N + Nitrite N(mg/L) (Max) Fecal Coliform (MPN/100ml) (Min)  \\\n",
              "0                              3.60                                9   \n",
              "1                              3.56                               15   \n",
              "2                              1.64                                3   \n",
              "3                              2.30                               24   \n",
              "4                              1.00                               43   \n",
              "\n",
              "  Fecal Coliform (MPN/100ml) (Max) Total Coliform (MPN/100ml) (Min)  \\\n",
              "0                               21                              120   \n",
              "1                               23                              150   \n",
              "2                                3                               47   \n",
              "3                              365                              170   \n",
              "4                              289                              240   \n",
              "\n",
              "  Total Coliform (MPN/100ml) (Max)  \n",
              "0                              210  \n",
              "1                              240  \n",
              "2                              150  \n",
              "3                              549  \n",
              "4                              727  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2e030e20-baed-4572-8c4c-330853c7cd81\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STN\\nCode</th>\n",
              "      <th>Name of Monitoring Location</th>\n",
              "      <th>Type Water Body</th>\n",
              "      <th>State Name</th>\n",
              "      <th>Temperature\\n?C (Min)</th>\n",
              "      <th>Temperature\\n?C (Max)</th>\n",
              "      <th>Dissolved Oxygen (mg/L) (Min)</th>\n",
              "      <th>Dissolved Oxygen (mg/L) (Max)</th>\n",
              "      <th>pH (Min)</th>\n",
              "      <th>pH (Max)</th>\n",
              "      <th>Conductivity (?mhos/cm) (Min)</th>\n",
              "      <th>Conductivity (?mhos/cm) (Max)</th>\n",
              "      <th>BOD (mg/L) (Min)</th>\n",
              "      <th>BOD (mg/L) (Max)</th>\n",
              "      <th>Nitrate N + Nitrite N(mg/L) (Min)</th>\n",
              "      <th>Nitrate N + Nitrite N(mg/L) (Max)</th>\n",
              "      <th>Fecal Coliform (MPN/100ml) (Min)</th>\n",
              "      <th>Fecal Coliform (MPN/100ml) (Max)</th>\n",
              "      <th>Total Coliform (MPN/100ml) (Min)</th>\n",
              "      <th>Total Coliform (MPN/100ml) (Max)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4368.0</td>\n",
              "      <td>KOLLERU LAKE KOKKIRAYALANKA (V), KAILALUR (M)</td>\n",
              "      <td>LAKE</td>\n",
              "      <td>ANDHRA PRADESH</td>\n",
              "      <td>24.0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>3.2</td>\n",
              "      <td>6.5</td>\n",
              "      <td>7.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>245</td>\n",
              "      <td>5160</td>\n",
              "      <td>1.6</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.02</td>\n",
              "      <td>3.60</td>\n",
              "      <td>9</td>\n",
              "      <td>21</td>\n",
              "      <td>120</td>\n",
              "      <td>210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2353.0</td>\n",
              "      <td>KONDAKARLA-AAVA LAKE, PARAWADA PHARMA CITY, VI...</td>\n",
              "      <td>LAKE</td>\n",
              "      <td>ANDHRA PRADESH</td>\n",
              "      <td>26.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>6.8</td>\n",
              "      <td>6.9</td>\n",
              "      <td>7.8</td>\n",
              "      <td>599</td>\n",
              "      <td>1179</td>\n",
              "      <td>1.9</td>\n",
              "      <td>4.6</td>\n",
              "      <td>0.77</td>\n",
              "      <td>3.56</td>\n",
              "      <td>15</td>\n",
              "      <td>23</td>\n",
              "      <td>150</td>\n",
              "      <td>240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1790.0</td>\n",
              "      <td>PULICATE LAKE , NELLORE DIST</td>\n",
              "      <td>LAKE</td>\n",
              "      <td>ANDHRA PRADESH</td>\n",
              "      <td>18.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>4.2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>7.2</td>\n",
              "      <td>8.2</td>\n",
              "      <td>28000</td>\n",
              "      <td>56900</td>\n",
              "      <td>2.4</td>\n",
              "      <td>2.8</td>\n",
              "      <td>1.20</td>\n",
              "      <td>1.64</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>47</td>\n",
              "      <td>150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4391.0</td>\n",
              "      <td>CHENGAMBAKAM TANK IN SRI CITY SEZ,\\nTIRUPATHI</td>\n",
              "      <td>TANK</td>\n",
              "      <td>ANDHRA PRADESH</td>\n",
              "      <td>22.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>5.4</td>\n",
              "      <td>6.2</td>\n",
              "      <td>6.3</td>\n",
              "      <td>7.9</td>\n",
              "      <td>180</td>\n",
              "      <td>476</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>0.34</td>\n",
              "      <td>2.30</td>\n",
              "      <td>24</td>\n",
              "      <td>365</td>\n",
              "      <td>170</td>\n",
              "      <td>549</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4921.0</td>\n",
              "      <td>ANNAMAYYA PROJECT ON CHEYYERU\\nRESERVOIR</td>\n",
              "      <td>Wetland</td>\n",
              "      <td>ANDHRA PRADESH</td>\n",
              "      <td>21.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>5.4</td>\n",
              "      <td>6.5</td>\n",
              "      <td>7.3</td>\n",
              "      <td>8.0</td>\n",
              "      <td>496</td>\n",
              "      <td>734</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.35</td>\n",
              "      <td>1.00</td>\n",
              "      <td>43</td>\n",
              "      <td>289</td>\n",
              "      <td>240</td>\n",
              "      <td>727</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e030e20-baed-4572-8c4c-330853c7cd81')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2e030e20-baed-4572-8c4c-330853c7cd81 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2e030e20-baed-4572-8c4c-330853c7cd81');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Visualize the dataset\n",
        "Make a graph of the different bodies of water\n"
      ],
      "metadata": {
        "id": "j4kyiqUlW0D6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# get the different body of water types\n",
        "# print(df[\"Type Water Body\"].unique())\n",
        "\n",
        "lakes = df.loc[df['Type Water Body'] == 'LAKE']\n",
        "ponds = df.loc[df['Type Water Body'] == 'POND']\n",
        "wetlands = df.loc[df['Type Water Body'] == 'Wetland']\n",
        "tanks = df.loc[df['Type Water Body'] == 'TANK']\n",
        "\n",
        "water_body_list = { 'Lakes': len(lakes), 'Ponds': len(ponds), 'Wetland': len(wetlands), 'Tank': len(tanks)}\n",
        "water_body = list(water_body_list.keys())\n",
        "water_quantity = list(water_body_list.values())\n",
        "\n",
        "fig = plt.figure(figsize =(10, 5))\n",
        "\n",
        "plt.bar(water_body, water_quantity)\n",
        " \n",
        "# Show Plot\n",
        "plt.title(\"Bodies of Water in the dataset\")\n",
        "plt.xlabel(\"Type of Water Body\")\n",
        "plt.ylabel(\"Quantity\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "A92kzlX9ZYhc",
        "outputId": "57080b14-2967-4bb2-8472-6a530d550418"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove the elements of the dataset that do NOT have drinkable water (pH is < 6.5 and > 8.5)\n",
        "new_df = df.loc[(df['pH (Min)'].astype(float) >= 6.5)]\n",
        "new_df = df.loc[(df['pH (Max)'].astype(float) <= 8.5)]\n",
        "\n",
        "print(\"Undrinkable: \" + str(len(df) - len(new_df)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IpF2uuLMsT37",
        "outputId": "0ca37dc3-2110-43c8-887e-4865d6f718d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Undrinkable: 67\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Determine which body of water has undrinkable water (pH is < 6.5 and > 8.5)\n",
        "undrinkable = df.loc[(df['pH (Min)'].astype(float) < 6.5)]\n",
        "undrinkable = df.loc[(df['pH (Max)'].astype(float) > 8.5)]\n",
        "\n",
        "bad_lake = len(lakes.loc[(lakes['pH (Min)'].astype(float) < 6.5)]) + len(lakes.loc[(lakes['pH (Max)'].astype(float) > 8.5)])\n",
        "bad_pond = len(ponds.loc[(ponds['pH (Min)'].astype(float) < 6.5)]) + len(ponds.loc[(ponds['pH (Max)'].astype(float) > 8.5)])\n",
        "bad_wetland = len(wetlands.loc[(wetlands['pH (Min)'].astype(float) < 6.5)]) + len(wetlands.loc[(wetlands['pH (Max)'].astype(float) > 8.5)])\n",
        "bad_tank = len(tanks.loc[(tanks['pH (Min)'].astype(float) < 6.5)]) + len(tanks.loc[(tanks['pH (Max)'].astype(float) > 8.5)])\n",
        "sum = bad_lake + bad_pond + bad_wetland + bad_tank\n",
        "\n",
        "print(bad_lake)\n",
        "print(bad_pond)\n",
        "print(bad_wetland)\n",
        "print(bad_tank)\n",
        "print(sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CKZy6uFKwQXF",
        "outputId": "bac5753b-ba36-4337-8f3b-aeae8d96cef0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "76\n",
            "18\n",
            "3\n",
            "20\n",
            "117\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Learn the Machine\n",
        "1. Linear Regression\n",
        "2. Logisitc Regression\n",
        "3. K-Means Clustering"
      ],
      "metadata": {
        "id": "JlA0snIZtFQR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Linear Regression on Dissolved Oxygen and pH\n",
        "# 6.5-8 is an ideal DO for drinking water\n",
        "# 6.5-8.5 is an ideal pH for drinking water\n",
        "\n",
        "from sklearn import linear_model\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import math\n",
        "\n",
        "X = []\n",
        "y = []\n",
        "\n",
        "# Loop over the dataset, appending DO and pH to X. If they are within the boundaries for clean water then append 1 to y, else append 0. \n",
        "for i in range(len(df)):\n",
        "  do_min = df['Dissolved Oxygen (mg/L) (Min)'][i]\n",
        "  do_max = df['Dissolved Oxygen (mg/L) (Max)'][i]\n",
        "  ph_min = df['pH (Min)'][i]\n",
        "  ph_max = df['pH (Max)'][i]\n",
        "  if not ((math.isnan(do_min)) & (math.isnan(do_max))):\n",
        "    X.append([float(do_min), float(do_max), float(ph_min), float(ph_max)])\n",
        "    if (float(df['Dissolved Oxygen (mg/L) (Min)'][i]) >= 6.5) & (float(df['Dissolved Oxygen (mg/L) (Min)'][i]) < 8) & (float(df['pH (Min)'][i]) >= 6.5) & (float(df['pH (Max)'][i]) <= 8.5):\n",
        "      y.append(1)\n",
        "    else:\n",
        "      y.append(0)\n",
        "\n",
        "# Split into training and testing. The higher the number, the lower the MSE gets!\n",
        "X_train = X[:-50]\n",
        "X_test = X[-50:]\n",
        "\n",
        "y_train = y[:-50]\n",
        "y_test = y[-50:]\n",
        "\n",
        "lr = linear_model.LinearRegression()\n",
        "lr.fit(X_train, y_train)\n",
        "y_pred = lr.predict(X_test)\n",
        "print(\"Mean squared error: \", mean_squared_error(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fm87UwqBSivV",
        "outputId": "a7ee95e1-f6bd-42bf-cae5-dab682431567"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean squared error:  0.11138543272536258\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Logistic Regression with StandardScaler\n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import f1_score\n",
        "\n",
        "# Apply StandardScaler to X\n",
        "scaler = StandardScaler()\n",
        "scaler = scaler.fit(X)\n",
        "X = scaler.transform(X)\n",
        "\n",
        "lr = LogisticRegression(random_state=0)\n",
        "\n",
        "# Split into training and testing. The lower the number, the higher the F1 score gets!\n",
        "X_train = X[:-20]\n",
        "X_test = X[-20:]\n",
        "\n",
        "y_train = y[:-20]\n",
        "y_test = y[-20:]\n",
        "\n",
        "lr.fit(X_train, y_train)\n",
        "y_pred = lr.predict(X_test)\n",
        "f1 = f1_score(y_test, y_pred, average=\"weighted\")\n",
        "print(\"F1 score: \", f1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jnV3LruWosHD",
        "outputId": "93e6b517-da56-4022-f4ab-852e4d403ac5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "F1 score:  0.851150895140665\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# K Means Clustering \n",
        "# Clustering the BOD to determine water quality\n",
        "# BOD: 1-2 (very good), 3-5 (fair), 6-9 (poor), 100+ (very poor)\n",
        "\n",
        "from sklearn.cluster import KMeans\n",
        "# import math\n",
        "\n",
        "\"\"\"\n",
        "Me trying to manually initialize the df .....\n",
        "min = []\n",
        "max = []\n",
        "X = []\n",
        "for i in range(len(df)):\n",
        "  bod_min = float(df['BOD (mg/L) (Min)'][i])\n",
        "  bod_max = float(df['BOD (mg/L) (Max)'][i])\n",
        "  if not math.isnan(bod_min):\n",
        "    if not math.isnan(bod_max):\n",
        "      X.append([bod_min, bod_max])\n",
        "      min.append(bod_min)\n",
        "      max.append(bod_max)\n",
        "\"\"\"\n",
        "\n",
        "k = 10\n",
        "new_df = df.dropna()\n",
        "km = KMeans(n_clusters=k, random_state=42, n_init=10)\n",
        "y_pred = km.fit_predict(new_df[['BOD (mg/L) (Min)', 'BOD (mg/L) (Max)']])\n",
        "\n",
        "new_df['cluster'] = y_pred\n",
        "\n",
        "df_0 = new_df[new_df.cluster == 0]\n",
        "df_1 = new_df[new_df.cluster == 1]\n",
        "df_2 = new_df[new_df.cluster == 2]\n",
        "df_3 = new_df[new_df.cluster == 3]\n",
        "df_4 = new_df[new_df.cluster == 4]\n",
        "df_5 = new_df[new_df.cluster == 5]\n",
        "df_6 = new_df[new_df.cluster == 6]\n",
        "df_7 = new_df[new_df.cluster == 7]\n",
        "df_8 = new_df[new_df.cluster == 8]\n",
        "df_9 = new_df[new_df.cluster == 9]\n",
        "\n",
        "plt.title('Clustering Biological Oxygen Demand (BOD) without preprocessing')\n",
        "plt.ylabel('BOD (mg/L) (Max)')\n",
        "plt.xlabel('BOD (mg/L) (Min)')\n",
        "plt.scatter(df_0['BOD (mg/L) (Min)'], df_0['BOD (mg/L) (Max)'], color='yellow')\n",
        "plt.scatter(df_1['BOD (mg/L) (Min)'], df_1['BOD (mg/L) (Max)'], color='red')\n",
        "plt.scatter(df_2['BOD (mg/L) (Min)'], df_2['BOD (mg/L) (Max)'], color='#DFB406')\n",
        "plt.scatter(df_3['BOD (mg/L) (Min)'], df_3['BOD (mg/L) (Max)'], color='#B00505')\n",
        "plt.scatter(df_4['BOD (mg/L) (Min)'], df_4['BOD (mg/L) (Max)'], color='#DFAA06')\n",
        "plt.scatter(df_5['BOD (mg/L) (Min)'], df_5['BOD (mg/L) (Max)'], color='#DF6306')\n",
        "plt.scatter(df_6['BOD (mg/L) (Min)'], df_6['BOD (mg/L) (Max)'], color='#BF9206')\n",
        "plt.scatter(df_7['BOD (mg/L) (Min)'], df_7['BOD (mg/L) (Max)'], color='green')\n",
        "plt.scatter(df_8['BOD (mg/L) (Min)'], df_8['BOD (mg/L) (Max)'], color='brown')\n",
        "plt.scatter(df_9['BOD (mg/L) (Min)'], df_9['BOD (mg/L) (Max)'], color='#FF9500')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 594
        },
        "id": "aGMUufuPGIVf",
        "outputId": "ea46aed9-003b-4d58-c01f-2b1ccae1858b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-11-64a7484f3054>:28: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  new_df['cluster'] = y_pred\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7fd8f35437f0>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
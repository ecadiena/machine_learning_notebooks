{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ecadiena/machine_learning_notebooks/blob/main/Linear%20Regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7r7sc2OpZSmf"
      },
      "outputs": [],
      "source": [
        "###\n",
        "### Import dependencies. Do not change. For reference only.\n",
        "###\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.datasets import fetch_california_housing\n",
        "from sklearn.metrics import mean_squared_error"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###\n",
        "### Load the California Housing dataset.\n",
        "###\n",
        "\n",
        "data = fetch_california_housing(as_frame=True, return_X_y=True)\n",
        "# as_frame=True return_X_y=True\n",
        "# feature names: ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup', 'Latitude', 'Longitude']\n",
        "# target names: ['MedHouseVal']\n",
        "\n",
        "X = data[0]\n",
        "y = data[1]\n",
        "\n",
        "# Only use 50% of the data.\n",
        "X = X[:int(X.shape[0] / 2)]\n",
        "y = y[:int(y.shape[0] / 2)]\n",
        "print(X)"
      ],
      "metadata": {
        "id": "f9AphNDfZ4Rk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d6b7fa2f-8799-4f95-84c1-10218b93cb6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n",
            "0       8.3252      41.0  6.984127   1.023810       322.0  2.555556     37.88   \n",
            "1       8.3014      21.0  6.238137   0.971880      2401.0  2.109842     37.86   \n",
            "2       7.2574      52.0  8.288136   1.073446       496.0  2.802260     37.85   \n",
            "3       5.6431      52.0  5.817352   1.073059       558.0  2.547945     37.85   \n",
            "4       3.8462      52.0  6.281853   1.081081       565.0  2.181467     37.85   \n",
            "...        ...       ...       ...        ...         ...       ...       ...   \n",
            "10315   5.2227      18.0  5.552147   0.935583      1189.0  3.647239     33.85   \n",
            "10316   5.8060      16.0  6.872517   1.054636      1558.0  2.579470     33.85   \n",
            "10317  10.1299      25.0  8.239631   0.935484       676.0  3.115207     33.84   \n",
            "10318  10.5981      17.0  8.973140   1.064050      1605.0  3.316116     33.84   \n",
            "10319   8.3931       9.0  7.388302   1.129669      4005.0  2.822410     33.84   \n",
            "\n",
            "       Longitude  \n",
            "0        -122.23  \n",
            "1        -122.22  \n",
            "2        -122.24  \n",
            "3        -122.25  \n",
            "4        -122.25  \n",
            "...          ...  \n",
            "10315    -117.82  \n",
            "10316    -117.80  \n",
            "10317    -117.82  \n",
            "10318    -117.81  \n",
            "10319    -117.79  \n",
            "\n",
            "[10320 rows x 8 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###\n",
        "### Split data into train and test sets. Do not change. For reference only.\n",
        "###\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.25, random_state=42\n",
        ")"
      ],
      "metadata": {
        "id": "O5q_QzivZ8vX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "###\n",
        "### TODO - FILL IN THE BELOW FUNCTION\n",
        "### \n",
        "\n",
        "def get_regression_model():\n",
        "  \"\"\"\n",
        "  Define and return the machine learning model.\n",
        "  \n",
        "  from sklearn.dummy import DummyClassifier\n",
        "  model = DummyClassifier(strategy=\"most_frequent\")\n",
        "  \"\"\"\n",
        "\n",
        "  # import and define the LinearRegression and RandomForestRegressor models\n",
        "  from sklearn.linear_model import LinearRegression\n",
        "  # from sklearn.ensemble import RandomForestRegressor\n",
        "  \n",
        "  # initialize lr to LinearRegression()\n",
        "  lr = LinearRegression() # Mean Squared Error:  0.555157420181748\n",
        "\n",
        "  # initialize rf to RandomForestRegressor(n_estimator, max_depth, n_jobs)\n",
        "  # rf = RandomForestRegressor(n_estimators=10000, max_depth=8, n_jobs=-1)\n",
        "\n",
        "  return lr"
      ],
      "metadata": {
        "id": "sFk8Fbk9aFiR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "###\n",
        "### Train and evaluate the model.\n",
        "###\n",
        "\n",
        "model = get_regression_model()\n",
        "\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print(\"Mean Squared Error: \", mse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3zHWFhYda330",
        "outputId": "ebd14ef0-6843-47ea-be58-84e77089152e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error:  0.5551574201817494\n"
          ]
        }
      ]
    }
  ]
}